// run-rustfix
#![allow(unused_imports)]
#![warn(
    clippy::all,
    clippy::style,
    clippy::mem_replace_option_with_none,
    clippy::mem_replace_with_default
)]

use std::collections::{BTreeMap, BTreeSet, BinaryHeap, HashMap, HashSet, LinkedList, VecDeque};
use std::mem;

fn replace_option_with_none() {
    let mut an_option = Some(1);
    let _ = an_option.take();
    let an_option = &mut Some(1);
    let _ = an_option.take();
}

fn replace_with_default() {
    let mut s = String::from("foo");
    let _ = std::mem::take(&mut s);

    let s = &mut String::from("foo");
    let _ = std::mem::take(s);
    let _ = std::mem::take(s);

    let mut v = vec![123];
    let _ = std::mem::take(&mut v);
    let _ = std::mem::take(&mut v);
    let _ = std::mem::take(&mut v);
    let _ = std::mem::take(&mut v);

    let mut hash_map: HashMap<i32, i32> = HashMap::new();
    let _ = std::mem::take(&mut hash_map);

    let mut btree_map: BTreeMap<i32, i32> = BTreeMap::new();
    let _ = std::mem::take(&mut btree_map);

    let mut vd: VecDeque<i32> = VecDeque::new();
    let _ = std::mem::take(&mut vd);

    let mut hash_set: HashSet<&str> = HashSet::new();
    let _ = std::mem::take(&mut hash_set);

    let mut btree_set: BTreeSet<&str> = BTreeSet::new();
    let _ = std::mem::take(&mut btree_set);

    let mut list: LinkedList<i32> = LinkedList::new();
    let _ = std::mem::take(&mut list);

    let mut binary_heap: BinaryHeap<i32> = BinaryHeap::new();
    let _ = std::mem::take(&mut binary_heap);
}

fn main() {
    replace_option_with_none();
    replace_with_default();
}
